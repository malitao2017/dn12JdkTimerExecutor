jdk1timer是常规的timer用法

jdk2ScheduledExecutorService 是ScheduledExecutorService用法
example1是用的一种方法
example2参考：
http://blog.sina.com.cn/s/blog_8e48f19a01018y4h.html
example3 只是内容
详细说明：
http://blog.csdn.net/tsyj810883979/article/details/8481621

api参考：
http://www.apihome.cn/api/java/ScheduledExecutorService.html

jdk3compare参考：
http://www.cnblogs.com/androidez/archive/2013/03/12/2955842.html
结论jdk1.5之后不再用timer

内容：
java.util.Timer计时器有管理任务延迟执行("如1000ms后执行任务")以及周期性执行("如每500ms执行一次该任务")。
但是，Timer存在一些缺陷，因此你应该考虑使用ScheduledThreadPoolExecutor作为代替品,Timer对调度的支持是基于绝对时间,而不是相对时间的，
由此任务对系统时钟的改变是敏感的;ScheduledThreadExecutor只支持相对时间。

Timer的另一个问题在于，如果TimerTask抛出未检查的异常，Timer将会产生无法预料的行为。
Timer线程并不捕获异常，所以TimerTask抛出的未检查的异常会终止timer线程。
这种情况下，Timer也不会再重新恢复线程的执行了;它错误的认为整个Timer都被取消了。
此时，已经被安排但尚未执行的TimerTask永远不会再执行了，新的任务也不能被调度了。
　
个人总结：timer的bug：60秒执行一次的话，如果用户修改了时间的话 那么时针都会归0，本来是临近10秒执行的时候timer又会重新计时一次 再等60才执行。

测试Timer的例子

运行该程序，Timer会抛出一个RumtimeException和java.lang.IllegalStateException:Timer already cancelled.
常言道，真是祸不单行，Timer还将它的问题传染给下一个倒霉的调用者，这个调用者原本试图提交一个TimerTask的，你可能希望程序会一直运行下去，然而实际情况如程序所示5秒钟后就中止了，还伴随着一个异常，异常的消息是"Timer already cancelled"。ScheduledThreadPoolExector妥善地处理了这个异常的任务，所以说在java5.0或更高的JDK中，几乎没有理由再使用Timer了。

用ScheduledThreadPoolExector改进后的例子：

